name: Run Benchmarks

on:
  push:
    branches: [workflow, master]
  pull_request:
    branches: [workflow, master]
  schedule:
    - cron: '0 0 1 * *' # monthly on 1st
  workflow_dispatch:
    inputs:
      techs:
        description: 'Technologies to benchmark'
        required: false
        type: choice
        options:
          - all
          - go
          - bun
          - node
          - hono-bun
          - hono-node
        default: all

jobs:
  discover-technologies:
    runs-on: ubuntu-latest
    outputs:
      technologies: ${{ steps.get-techs.outputs.technologies }}
      selected-techs: ${{ steps.filter-techs.outputs.selected-techs }}
    steps:
      - uses: actions/checkout@v4
      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
      - name: Get all technologies from config
        id: get-techs
        run: |
          TECHS=$(yq eval '.technologies | keys | @json' config/technologies.yaml)
          echo "technologies=$TECHS" >> $GITHUB_OUTPUT
          echo "Available technologies: $TECHS"
      - name: Filter technologies based on input
        id: filter-techs
        run: |
          ALL_TECHS='${{ steps.get-techs.outputs.technologies }}'
          INPUT_TECH='${{ github.event.inputs.techs }}'
          
          # Handle different trigger types
          if [ "${{ github.event_name }}" = "schedule" ] || [ -z "$INPUT_TECH" ] || [ "$INPUT_TECH" = "all" ]; then
            # For scheduled runs or when 'all' is selected, use all technologies
            SELECTED_TECHS="$ALL_TECHS"
          else
            # For manual dispatch with specific tech
            SELECTED_TECHS="[\"$INPUT_TECH\"]"
          fi
          
          echo "selected-techs=$SELECTED_TECHS" >> $GITHUB_OUTPUT
          echo "Selected technologies: $SELECTED_TECHS"

  benchmarks:
    needs: discover-technologies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tech: ${{ fromJson(needs.discover-technologies.outputs.selected-techs) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      - name: Install Bun
        run: |
          curl -fsSL https://bun.sh/install | bash
          echo "${HOME}/.bun/bin" >> $GITHUB_PATH
      - name: Install framework dependencies
        run: |
          # Install dependencies for each technology if package.json exists
          if [ -f "benchmarks/${{ matrix.tech }}/package.json" ]; then
            echo "Installing dependencies for ${{ matrix.tech }}"
            cd "benchmarks/${{ matrix.tech }}"
            if [ "${{ matrix.tech }}" = "hono-bun" ] || [ "${{ matrix.tech }}" = "bun" ]; then
              bun install
            else
              npm install
            fi
            cd ../..
          fi
      - name: Install dependencies
        run: |
          cd orchestrator && go mod tidy
          cd ..
          node scripts/generate_test_data.js
      - name: Install wrk
        run: |
          sudo apt-get update
          sudo apt-get install -y wrk
          which wrk
          echo "wrk installed successfully"
      - name: Build orchestrator
        run: |
          cd orchestrator && go build -o benchmark-cli
      - name: Run benchmarks for ${{ matrix.tech }}
        run: |
          ./orchestrator/benchmark-cli run --tech=${{ matrix.tech }} --test=all
      - name: Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ matrix.tech }}
          path: reports/

  generate-html-report:
    needs: benchmarks
    runs-on: ubuntu-latest
    if: always() && (needs.benchmarks.result == 'success' || needs.benchmarks.result == 'failure')
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Download all reports
        uses: actions/download-artifact@v4
        with:
          path: reports-artifacts
          pattern: reports-*
          merge-multiple: true
      - name: Move reports to correct location
        run: |
          mkdir -p reports
          find reports-artifacts -name "*.json" -exec cp {} reports/ \;
          ls -la reports/
      - name: Generate HTML report
        run: |
          node scripts/generate-html-report.js
      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: html-report
          path: reports/benchmark-report.html
      - name: Upload HTML report as Pages artifact (if on main branch)
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-pages-artifact@v3
        with:
          path: reports/
